services:
  app:
    build:
      context: .
      dockerfile: images/app.Dockerfile
      args:
        - LOCAL_MACHINE_GID=${LOCAL_MACHINE_GID}
    env_file:
      - .env      
    volumes:
      - .:/app
    ports:
      - "3000:3000"
      - "3001:3001"
      - "3002:3002"
      - "51233:51233"
      - "1991:1991"
    extra_hosts:
      - host.docker.internal:host-gateway # used in deno task webhook
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
  db:
    image: mariadb:${DB_VERSION-latest}
    networks:
      - default       
    environment:
      MARIADB_USER: ${DB_USER}
      MARIADB_ROOT_PASSWORD: ${DB_PASSWORD}
      MARIADB_DATABASE: ${DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
  # TODO: Deno.telemetry does not appear to be in even remotely stable state, check back in on Deno 2.1.6    
  # otel:
  #   image: grafana/otel-lgtm:0.8.1
  #   networks:
  #     - default
  #   volumes:
  #     - ./lgtm/grafana:/data/grafana 
  #     - ./lgtm/prometheus:/data/prometheus
  #     - ./lgtm/loki:/data/loki
  #   environment:
  #     GF_PATHS_DATA: /data/grafana 
  #     GF_GID: 984
  #     GF_UID: 1000
  #   ports:
  #     - "3000:3000"
  #     - "4317:4317"
  #     - "4318:4318"      

volumes:
  db_data:

networks:
  # Creating our own network allows us to connect between containers using their service name.
  default:
    driver: bridge
