{
  "version": 3,
  "sources": ["../main.ts"],
  "sourcesContent": ["const {\n\tscryptSync,\n\trandomFillSync,\n\tgetCiphers,\n\tcreateCipheriv,\n\tcreateDecipheriv,\n} = await import('node:crypto');\n// import {\n// \tcreateCipheriv,\n// \tcreateDecipheriv,\n// \tgetCiphers,\n// \trandomFillSync,\n// \tscryptSync,\n// } from 'node:crypto';\n\n// crypto.randomBytes is being ran sync here, which will cause a block in script processing.\n// it is doing this because it needs to reach out to the OS for randomness via entropy\nconst settings = {\n\trandom_setting: 'this is to help test some syntax below',\n\tencryption_method: 'aes-256-cbc',\n\t// the length of the is dependent on the cipher algorithm.\n\t// aes-256 needs 256 bits for the key\n\t// bytes are 8 bits.\n\t// 256/8 = 32, so we need 32 bytes of generated data for the key.\n\t// for more reading: https://www.measuringknowhow.com/understanding-what-is-the-key-length-for-aes-256/\n\tsecret_key_length: 32,\n\t// aes is a block cipher.\n\t// the iv is dependent on the length of the block.\n\t// the block must be 128 bits.\n\t// 128/8 = 16, so we need 16 bytes of generated data\n\t// for more reading: https://engineering.purdue.edu/kak/compsec/NewLectures/Lecture8.pdf\n\tsecret_iv_length: 16,\n\t// handy dandy random string generator: https://api.wordpress.org/secret-key/1.1/salt/\n\t// yes, normally this would live in .env, but I don't care since this code exists for testing\n\tpassword:\n\t\t'li/,{ng)S.x|LE8!-kqv-_T]kh=dgrwXrB;hN_-:Cq-]t`px{W!*qqbY+]#a~|sQ',\n\tsalt: 'Rp4k5yJz;}-y!!bT+wWnPTz:,a,)r#E.b%cz|$8-oHpGl91#;G$ lm4gL_`uyy?S',\n};\n\nconst {\n\tpassword,\n\tsalt,\n\tsecret_key_length,\n\tsecret_iv_length,\n\tencryption_method,\n} = settings;\n\n// the in operator not working on arrays in javascript is a crime against humanity.\nif (!getCiphers().includes(encryption_method)) {\n\tconsole.error(\n\t\t`${encryption_method} is missing. Please review the available ciphers in openssl. e.g. openssl enc -ciphers`,\n\t);\n}\n\nconst key = scryptSync(password, salt, secret_key_length);\nconst iv = randomFillSync(new Uint8Array(secret_iv_length));\n\nfunction encrypt(plain_text: string): string {\n\tconst cipher = createCipheriv(encryption_method, key, iv);\n\n\tlet encrypted = cipher.update(plain_text, 'utf8', 'hex');\n\tencrypted += cipher.final('hex');\n\n\tconsole.log(`encrypted string: ${encrypted}`);\n\n\treturn encrypted;\n}\n\nfunction decrypt(encrypted: string): string {\n\tconst decipher = createDecipheriv(encryption_method, key, iv);\n\n\tlet decrypted = decipher.update(encrypted, 'hex', 'utf8');\n\tdecrypted += decipher.final('utf8');\n\tconsole.log(`decrypted string: ${decrypted}`);\n\n\treturn decrypted;\n}\n"],
  "mappings": "AAAA,GAAM,CACL,WAAAA,EACA,eAAAC,EACA,WAAAC,EACA,eAAAC,EACA,iBAAAC,CACD,EAAI,KAAM,QAAO,aAAa,EAWxBC,EAAW,CAChB,eAAgB,yCAChB,kBAAmB,cAMnB,kBAAmB,GAMnB,iBAAkB,GAGlB,SACC,mEACD,KAAM,kEACP,EAEM,CACL,SAAAC,EACA,KAAAC,EACA,kBAAAC,EACA,iBAAAC,EACA,kBAAAC,CACD,EAAIL,EAGCH,EAAW,EAAE,SAASQ,CAAiB,GAC3C,QAAQ,MACP,GAAGA,CAAiB,wFACrB,EAGD,IAAMC,EAAMX,EAAWM,EAAUC,EAAMC,CAAiB,EAClDI,EAAKX,EAAe,IAAI,WAAWQ,CAAgB,CAAC",
  "names": ["scryptSync", "randomFillSync", "getCiphers", "createCipheriv", "createDecipheriv", "settings", "password", "salt", "secret_key_length", "secret_iv_length", "encryption_method", "key", "iv"]
}
